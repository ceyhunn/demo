plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java-library'
    id 'org.beryx.jlink' version '2.19.0'
    id "nu.studer.jooq" version "4.2"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
mainClassName = 'com.example.demo.DemoApplication'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

java {
    modularity.inferModulePath = true;
}

ext {
    dbUrl = 'jdbc:postgresql://localhost:5432/test'
    dbUser = 'postgres'
    dbPassword = 'postgres'
    dbDefaultSchema = 'public'
}

configurations {
   springFactoriesHolder { transitive = false }
}

dependencies {
    springFactoriesHolder 'org.springframework.boot:spring-boot'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqRuntime 'org.postgresql:postgresql'
    runtime 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    compileOnly"org.mapstruct:mapstruct-processor:1.3.1.Final"
    testCompileOnly "org.mapstruct:mapstruct-processor:1.3.1.Final"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:1.3.1.Final"
}

jooq {
    version = '3.13.0'
    edition = 'OSS'
    generateSchemaSourceOnCompilation = true
    main(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = dbUrl
            user = dbUser
            password = dbPassword
        }

        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                schemata {
                    schema {
                        inputSchema =  dbDefaultSchema
                    }
                }

            }
            target {
                packageName = 'com.example.demo'
            }
        }
    }
}

tasks.jar.enabled = true

prepareMergedJarsDir.doLast {
    // extract and merge META-INF/spring.factories from springFactoriesHolder
    def factories = configurations.springFactoriesHolder.files.collect {
        def props = new Properties()
        props.load(zipTree(it).matching { include 'META-INF/spring.factories' }.singleFile.newInputStream())
        props
    }
    def mergedProps = new Properties()
    factories.each { props ->
        props.each { key, value ->
            def oldVal = mergedProps[key]
            mergedProps[key] = oldVal ? "$oldVal,$value" : value
        }
    }
    def content = mergedProps.collect { key, value ->
        def v = (value as String).replace(',', ',\\\n')
        "$key=$v"
    }.join('\n\n')
    mkdir("$jlinkBasePath/META-INF")
    new File("$jlinkBasePath/META-INF/spring.factories").text = content

    // insert META-INF/spring.factories into the main jar
    ant.zip(update: "true", destfile: jar.archivePath, keepcompression: true) {
        fileset(dir: "$jlinkBasePath", includes: 'META-INF/**')
    }
}

jlink {
    mergedModule {
        uses 'ch.qos.logback.classic.spi.Configurator'
        excludeProvides service: 'org.apache.logging.log4j.spi.Provider'
        excludeProvides service: 'reactor.blockhound.integration.BlockHoundIntegration'
    }

    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        jvmArgs = [
            '--add-reads', 'com.example.merged.module=demo.main',
            '--add-opens', 'demo.main/com.example.demo=com.example.merged.module',
            '--add-opens', 'java.base/java.lang=com.example.merged.module',
            '--add-opens', 'java.base/java.io=com.example.merged.module',
        ]
    }
}
